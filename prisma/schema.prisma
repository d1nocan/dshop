// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    role          Role          @default(User)
    points        BigInt        @default(0)
    cooldown      BigInt        @default(0)
    transactions  Transaction[]
    accounts      Account[]
    sessions      Session[]
    tickets       Ticket[]
    messages      Message[]    @relation("UserMessages")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Item {
    id            String        @id @default(cuid())
    name          String
    description   String
    image         String?
    input         String?
    price         BigInt
    quantity      Int           @default(0)
    cooldown      Int           @default(0)
    lastBuy       BigInt        @default(0)
    inputRequired Boolean       @default(false)
    isHidden      Boolean?      @default(false)
    transactions  Transaction[]

    @@unique([id, price])
}

model Transaction {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    status    Status   @default(Pending)
    userId    String
    itemId    String
    points    BigInt
    input     String?  @default("")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    item      Item     @relation(fields: [itemId, points], references: [id, price], onDelete: Cascade)
}

model Message {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
    ticketId  String
    userId    String
    ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    user      User     @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
}

model Ticket {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    status    Status   @default(Pending)
    userId    String
    title     String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages  Message[]
}

enum Role {
    Admin
    User
    Banned
}

enum Status {
    Pending
    Completed
    Canceled
}
